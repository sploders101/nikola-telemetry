package dbapi

import (
	"database/sql"
	"fmt"

	"github.com/google/uuid"
	"github.com/sploders101/nikola-telemetry/dbapi/migrations"
	"github.com/sploders101/nikola-telemetry/helpers/config"
)

type Db struct {
	db *sql.DB
}

func NewDb(config config.ConfigFile) (Db, error) {
	db, err := sql.Open("sqlite3", config.DbPath)
	if err != nil {
		return Db{}, fmt.Errorf("An error occurred while opening the database: %w", err)
	}
	migrations.InitDb(db)

	return Db{db: db}, nil
}

type UserDetails struct {
	// The id of the user. Generated by the database
	Id int64
	// The name of the user.
	Username string
	// The registration code for the user.
	// Generated by `AddUser` during user creation and temporarily assigned until the account is linked.
	RegistrationCode string
	// The subject ID from Tesla's `id_token`
	TeslaId string
}

// Adds the user to the database, filling in generated fields on success.
func (self Db) AddUser(user *UserDetails) error {
	registrationCode, err := uuid.NewRandom()
	if err != nil {
		return fmt.Errorf("Failed to generate UUID: %w", err)
	}
	registrationCodeString := registrationCode.String()

	result, err := self.db.Exec(
		`
			insert into users (
				username,
				registration_code,
			) values (?, ?)
		`,
		user.Username,
		registrationCodeString,
	)
	if err != nil {
		return fmt.Errorf("Failed to add user to database: %w", err)
	}
	userId, err := result.LastInsertId()
	if err != nil {
		return fmt.Errorf("Failed to get user ID: %w", err)
	}

	user.Id = userId
	user.RegistrationCode = registrationCodeString

	return nil
}

// Hydrates a `UserDetails` struct by Id
func (self Db) GetUser(user *UserDetails) error {
	result := self.db.QueryRow(
		`
			select
				username,
				registration_code,
				tesla_id
			from users
			where
				id = ?
		`,
		user.Id,
	)

	if err := result.Scan(&user.Username, &user.RegistrationCode, &user.TeslaId); err != nil {
		return err
	}

	return nil
}

func (self Db) DeleteUser(userId int64) error {
	_, err := self.db.Exec(`delete from users where id = ?`)
	if err != nil {
		return err
	}
	return nil
}
